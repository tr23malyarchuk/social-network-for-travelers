// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Role {
  id Int @id @default(autoincrement())
  name String
  permissions String[]
  users User[] @relation("RoleUsers")
}


model User {
  id        Int      @id @default(autoincrement())
  roleId    Int
  role      Role     @relation("RoleUsers", fields: [roleId], references: [id])
  posts     Post[]   @relation("UserPosts")
  comments  Comment[] @relation("UserComments")
  likes     Like[]    @relation("UserLikes") // Добавлено поле для связи с Like
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String?
  content   String?
  text      String
  imageUrl  String?
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation("UserPosts", fields: [userId], references: [id])
  comments  Comment[] @relation("PostComments")
  likes     Like[]    @relation("PostLikes")
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  postId    Int
  userId    Int
  createdAt DateTime @default(now())

  post      Post     @relation("PostComments", fields: [postId], references: [id])
  user      User     @relation("UserComments", fields: [userId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())

  post      Post     @relation("PostLikes", fields: [postId], references: [id])
  user      User     @relation("UserLikes", fields: [userId], references: [id])
}
