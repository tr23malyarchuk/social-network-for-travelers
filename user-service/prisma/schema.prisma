// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Role {
  id Int @id @default(autoincrement())
  name String
  permissions String[]
  users User[] @relation("RoleUsers")
}


model User {
  id Int @id @default(autoincrement())
  email     String? @unique
  nickname  String? 
  password  String?
  roleId Int
  role Role @relation("RoleUsers", fields: [roleId], references: [id])
  posts Post[] @relation("UserPosts")
  comments Comment[] @relation("UserComments")
  likes Like[] @relation("UserLikes")
  createdAt DateTime @default(now())
  updatedAt DateTime?
}


model Post {
  id Int @id @default(autoincrement())
  userId Int 
  user User @relation("UserPosts", fields: [userId], references: [id])
  text String
  imageUrl String
  comments Comment[] @relation("PostComments")
  likes Like[] @relation("PostLikes")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



 model Comment{
  id Int @id @default(autoincrement())
  postId Int
  post Post @relation("PostComments", fields: [postId], references: [id])
  userId Int
  user User @relation("UserComments", fields: [userId], references: [id])
  text String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 }


 model Like{
  id Int @id @default(autoincrement())
  postId Int
  post Post @relation("PostLikes", fields: [postId], references: [id])
  userId Int
  user User  @relation("UserLikes", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 }